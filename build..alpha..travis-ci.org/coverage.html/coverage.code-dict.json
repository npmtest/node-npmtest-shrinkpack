{"/home/travis/build/npmtest/node-npmtest-shrinkpack/test.js":"/* istanbul instrument in package npmtest_shrinkpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/lib.npmtest_shrinkpack.js":"/* istanbul instrument in package npmtest_shrinkpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_shrinkpack = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_shrinkpack = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-shrinkpack && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_shrinkpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_shrinkpack\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_shrinkpack.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_shrinkpack.rollup.js'] =\n            local.assetsDict['/assets.npmtest_shrinkpack.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_shrinkpack.__dirname + '/lib.npmtest_shrinkpack.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/index.js":"// modules\nvar analyse = require('./src/analyse');\nvar cli = require('./src/cli');\nvar update = require('./src/update');\n\n// public\nmodule.exports = {\n  analyse: analyse,\n  cli: cli.run,\n  update: update\n};\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/index.js":"// 3rd party modules\nvar assign = require('lodash.assign');\nvar when = require('when');\n\n// modules\nvar createBundleDirectory = require('./create-bundle-directory');\nvar getDependencies = require('./get-dependencies');\nvar getGraph = require('./get-graph');\nvar getPaths = require('./get-paths');\nvar getStats = require('./get-stats');\nvar getUnusedDependencies = require('./get-unused-dependencies');\nvar pruneOptionalDependencies = require('./prune-optional-dependencies');\nvar readBundle = require('./read-bundle');\nvar readNpmCache = require('./read-npm-cache');\n\n// public\nmodule.exports = init;\n\n// implementation\nfunction init(options) {\n  return when({options: options, startTime: new Date()})\n    .then(getConfigWithPaths)\n    .then(getConfigWithGraph)\n    .then(handleOptionalDependencies)\n    .then(ensureBundleExists)\n    .then(getConfigWithNpmCacheContents)\n    .then(getConfigWithBundleContents)\n    .then(getConfigWithDependencies)\n    .then(getConfigWithUnusedDependencies)\n    .then(getConfigWithStats);\n\n  function getConfigWithPaths(config) {\n    return getPaths(config.options.directory)\n      .then(function (paths) {\n        return assign(config, {path: paths});\n      });\n  }\n\n  function getConfigWithGraph(config) {\n    return getGraph(config.path.graph)\n      .then(function (graph) {\n        return assign(config, {graph: graph});\n      });\n  }\n\n  function handleOptionalDependencies(config) {\n    return pruneOptionalDependencies(config)\n      .then(function (graph) {\n        return assign(config, {graph: graph});\n      });\n  }\n\n  function ensureBundleExists(config) {\n    return createBundleDirectory(config.path.shrinkpack)\n      .then(function () {\n        return config;\n      });\n  }\n\n  function getConfigWithNpmCacheContents(config) {\n    return readNpmCache(config.path.npmCache)\n      .then(function (npmCache) {\n        return assign(config, {npmCache: npmCache});\n      });\n  }\n\n  function getConfigWithBundleContents(config) {\n    return readBundle(config.path.shrinkpack)\n      .then(function (bundle) {\n        return assign(config, {bundle: bundle});\n      });\n  }\n\n  function getConfigWithDependencies(config) {\n    return getDependencies(config)\n      .then(function (deps) {\n        return assign(config, {deps: deps});\n      });\n  }\n\n  function getConfigWithUnusedDependencies(config) {\n    return getUnusedDependencies(config)\n      .then(function (unusedDependencies) {\n        return assign(config, {unusedDependencies: unusedDependencies});\n      });\n  }\n\n  function getConfigWithStats(config) {\n    return getStats(config)\n      .then(function (stats) {\n        return assign(config, {stats: stats});\n      });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/create-bundle-directory.js":"// modules\nvar fs = require('../lib/fs');\n\n// public\nmodule.exports = createBundleDirectory;\n\n// implementation\nfunction createBundleDirectory(location) {\n  return fs.mkdir(location)\n    .then(onSuccess, onError);\n\n  function onSuccess() {\n    return location;\n  }\n\n  function onError(err) {\n    if (err.code !== 'EEXIST') {\n      throw new Error('! failed to create node_shrinkwrap directory');\n    }\n    return location;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/lib/fs.js":"// 3rd party modules\nvar fs = require('graceful-fs');\nvar whenNode = require('when/node');\n\n// modules\nvar rateLimit = require('./rate-limit');\n\n// public\nmodule.exports = {\n  createReadStream: fs.createReadStream,\n  createWriteStream: fs.createWriteStream,\n  mkdir: wrap(fs.mkdir),\n  readdir: wrap(fs.readdir),\n  readFile: wrap(fs.readFile),\n  unlink: wrap(fs.unlink),\n  writeFile: wrap(fs.writeFile)\n};\n\nfunction wrap(fn) {\n  return rateLimit(whenNode.lift(fn));\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/lib/rate-limit.js":"// 3rd party modules\nvar guard = require('when/guard');\n\n// public\nmodule.exports = rateLimit;\n\n// implementation\nvar condition = guard.n(10);\n\nfunction rateLimit(fn) {\n  return guard(condition, fn);\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/get-dependencies.js":"// 3rd party modules\nvar when = require('when');\n\n// modules\nvar forEachNestedDependency = require('../lib/for-each-nested-dependency');\nvar Dependency = require('./dependency');\n\n// public\nmodule.exports = getDependencies;\n\n// implementation\nfunction getDependencies(config) {\n  Dependency.setConfig(config);\n  var dependencies = [];\n  var handler = config.options.keepOptional ? addDependency : addIfMandatory;\n  forEachNestedDependency(config.graph, handler);\n  return when(dependencies);\n\n  function addDependency(key, node) {\n    dependencies.push(new Dependency(key, node));\n  }\n\n  function addIfMandatory(key, node, parentNode) {\n    if (node.optional === true) {\n      delete parentNode[key];\n    } else {\n      addDependency(key, node);\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/lib/for-each-nested-dependency.js":"// public\nmodule.exports = forEachNestedDependency;\n\n// implementation\nfunction forEachNestedDependency(node, handler, key, parentNode) {\n  if (isObject(node)) {\n    if (isRootNode(node, key)) {\n      stepInto(node.dependencies, handler);\n    } else if (isPackage(node, key)) {\n      handler(key, node, parentNode);\n      stepInto(node, handler);\n    } else if (isDependencyMap(node, key)) {\n      stepInto(node, handler);\n    }\n  }\n}\n\nfunction isRootNode(node, key) {\n  return !key;\n}\n\nfunction isPackage(node, key) {\n  return key !== 'dependencies';\n}\n\nfunction isDependencyMap(node, key) {\n  return key === 'dependencies';\n}\n\nfunction stepInto(parentNode, handler) {\n  for (var key in parentNode) { // eslint-disable-line guard-for-in\n    forEachNestedDependency(parentNode[key], handler, key, parentNode);\n  }\n}\n\nfunction isObject(node) {\n  return Boolean(node) && (node.constructor === Object);\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/dependency/index.js":"// node modules\nvar path = require('path');\n\n// 3rd party modules\nvar chalk = require('chalk');\nvar when = require('when');\n\n// modules\nvar bundle = require('./bundle');\nvar cache = require('./cache');\nvar resolve = require('./resolve');\n\n// public\nmodule.exports = Dependency;\n\n// implementation\nfunction Dependency(name, graph) {\n  this.graph = graph;\n  this.name = name;\n}\n\n// statics\nDependency.setConfig = function (config) {\n  Dependency.prototype.config = config;\n};\n\n// shared\nDependency.prototype = {\n  bundle: function () {\n    if (!this.isBundled()) {\n      return bundle(this).then(function (dependency) {\n        console.info(chalk.green('+ %s'), dependency.getBundleName());\n        return dependency;\n      });\n    }\n    return when(this);\n  },\n  cache: function () {\n    if (!this.isCached() && !this.isBundled()) {\n      return cache(this).then(function (dependency) {\n        console.info(chalk.yellow('↓ %s from %s'), dependency.getId(), dependency.graph.resolved);\n        return dependency;\n      });\n    }\n    return when(this);\n  },\n  config: null,\n  getBundleName: function () {\n    var extension = this.config.options.compress ? '.tgz' : '.tar';\n    var name = this.name.replace(/\\//g, '-');\n    var version = this.graph.version;\n    return name + '-' + version + extension;\n  },\n  getId: function () {\n    return this.name + '@' + this.graph.version;\n  },\n  getPathToBundle: function () {\n    var directory = this.config.path.shrinkpack;\n    return path.join(directory, this.getBundleName());\n  },\n  getPathToNpmCache: function () {\n    return path.join(this.config.path.npmCache, this.name, this.graph.version, 'package.tgz');\n  },\n  getScope: function () {\n    var scope = this.name.substring(0, this.name.indexOf('/'));\n    return scope === this.name ? '' : scope;\n  },\n  isBundled: function () {\n    return this.getPathToBundle() in this.config.bundle;\n  },\n  isCached: function () {\n    return this.getPathToNpmCache() in this.config.npmCache;\n  },\n  isResolved: function () {\n    return Boolean(this.graph.resolved);\n  },\n  resolve: function () {\n    if (!this.isResolved()) {\n      return resolve(this).then(function (dependency) {\n        console.info(chalk.green('✓ set missing \"resolved\" property for %s to %s'), dependency.getId(), dependency.graph.resolved);\n        return dependency;\n      });\n    }\n    return when(this);\n  },\n  rewriteGraph: function () {\n    var relative = path.relative(this.config.path.project, this.getPathToBundle());\n    this.graph.resolved = './' + relative.split('\\\\').join('/');\n    return when(this);\n  },\n  synchronise: function () {\n    return when(this)\n      .then(this.resolve.bind(this))\n      .then(this.cache.bind(this))\n      .then(this.bundle.bind(this))\n      .then(this.rewriteGraph.bind(this))\n      .catch(function (err) {\n        console.error(chalk.red('! failed to resolve tarball for %s'), this.getId());\n        console.error(err);\n      }.bind(this));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/dependency/bundle.js":"// modules\nvar copyFile = require('../../lib/copy-file');\n\n// public\nmodule.exports = bundle;\n\n// implementation\nfunction bundle(dependency) {\n  return copyFile(dependency.getPathToNpmCache(), dependency.getPathToBundle())\n    .then(onSuccess, onError);\n\n  function onSuccess() {\n    return dependency;\n  }\n\n  function onError() {\n    throw new Error('! failed to shrinkpack ' + dependency.getId());\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/lib/copy-file.js":"// 3rd party modules\nvar chalk = require('chalk');\nvar fs = require('graceful-fs');\nvar gunzipMaybe = require('gunzip-maybe');\nvar when = require('when');\n\n// modules\nvar rateLimit = require('./rate-limit');\n\n// public\nmodule.exports = rateLimit(copyFile);\n\n// implementation\nfunction copyFile(source, target) {\n  return when.promise(function (resolve, reject) {\n    var gunzip$;\n    var read$ = fs.createReadStream(source);\n    var write$ = fs.createWriteStream(target);\n\n    read$.on('error', onReadError);\n    write$.on('error', onWriteError);\n    write$.on('finish', onWriteEnd);\n\n    if (isCompressed()) {\n      read$.pipe(write$);\n    } else {\n      gunzip$ = gunzipMaybe();\n      gunzip$.on('error', onGunzipError);\n      read$.pipe(gunzip$).pipe(write$);\n    }\n\n    function onReadError(err) {\n      console.error(chalk.red('! failed to read file %s'), source);\n      reject(err);\n    }\n\n    function onGunzipError(err) {\n      console.error(chalk.red('! failed to decompress file %s'), source);\n      reject(err);\n    }\n\n    function onWriteError(err) {\n      console.error(chalk.red('! failed to write file %s'), target);\n      reject(err);\n    }\n\n    function onWriteEnd() {\n      resolve();\n    }\n\n    function isCompressed() {\n      return target.search(/\\.tar$/) === -1;\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/dependency/cache.js":"// modules\nvar childProcess = require('../../lib/child-process');\n\n// public\nmodule.exports = cache;\n\n// implementation\nfunction cache(dependency) {\n  return childProcess.exec('npm cache --scope=' + dependency.getScope() + ' add ' + dependency.graph.resolved, {encoding: 'utf8'})\n    .then(onSuccess, onError);\n\n  function onSuccess() {\n    return dependency;\n  }\n\n  function onError() {\n    throw new Error('! failed to download ' + dependency.getId());\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/lib/child-process.js":"// 3rd party modules\nvar execa = require('execa');\n\n// modules\nvar rateLimit = require('./rate-limit');\n\n// public\nmodule.exports = {\n  exec: rateLimit(execa.shell),\n  spawn: execa\n};\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/dependency/resolve.js":"// modules\nvar childProcess = require('../../lib/child-process');\n\n// public\nmodule.exports = resolve;\n\n// implementation\nfunction resolve(dependency) {\n  return childProcess.exec('npm view ' + dependency.getId() + ' --json', {encoding: 'utf8'})\n    .then(onSuccess, onError);\n\n  function onSuccess(result) {\n    var json = JSON.parse(result.stdout);\n    if (json && json.dist && json.dist.tarball) {\n      dependency.graph.resolved = json.dist.tarball;\n      return dependency;\n    }\n    throw new Error('! ' + dependency.getId() + ' has no \"dist.tarball\" in `npm view ' + dependency.getId() + ' --json`');\n  }\n\n  function onError() {\n    throw new Error('! failed to call `npm view ' + dependency.getId() + ' --json`');\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/get-graph.js":"// modules\nvar fs = require('../lib/fs');\n\n// public\nmodule.exports = getGraph;\n\n// implementation\nfunction getGraph(location) {\n  return fs.readFile(location, {encoding: 'utf8'})\n    .then(onSuccess, onError);\n\n  function onSuccess(graph) {\n    return JSON.parse(graph);\n  }\n\n  function onError() {\n    throw new Error('! npm-shrinkwrap.json is missing, create it using `npm shrinkwrap --dev` then try again');\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/get-paths.js":"// node modules\nvar path = require('path');\n\n// modules\nvar childProcess = require('../lib/child-process');\n\n// public\nmodule.exports = getPaths;\n\n// implementation\nfunction getPaths(directory) {\n  return childProcess.exec('npm config get cache', {encoding: 'utf8'})\n    .then(onSuccess, onError);\n\n  function onSuccess(result) {\n    return {\n      graph: path.join(directory, 'npm-shrinkwrap.json'),\n      manifest: path.join(directory, 'package.json'),\n      npmCache: result.stdout,\n      project: directory,\n      shrinkpack: path.join(directory, 'node_shrinkwrap')\n    };\n  }\n\n  function onError() {\n    throw new Error('! failed to locate the npm cache');\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/get-stats.js":"// 3rd party modules\nvar when = require('when');\n\n// public\nmodule.exports = getStats;\n\n// implementation\nfunction getStats(config) {\n  var bundled = Object.keys(config.bundle);\n  var unused = Object.keys(config.unusedDependencies);\n  var unbundled = config.deps.filter(isNotBundled);\n  var uncached = unbundled.filter(isNotCached);\n  var unresolved = unbundled.filter(isNotResolved);\n  var cached = unbundled.length - uncached.length;\n\n  return when({\n    bundled: {\n      used: bundled.length,\n      unused: unused.length\n    },\n    total: config.deps.length,\n    unbundled: {\n      cached: cached,\n      total: unbundled.length,\n      uncached: uncached.length,\n      unresolved: unresolved.length\n    }\n  });\n\n  function isNotBundled(dependency) {\n    return !dependency.isBundled();\n  }\n\n  function isNotCached(dependency) {\n    return !dependency.isCached();\n  }\n\n  function isNotResolved(dependency) {\n    return !dependency.isResolved();\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/get-unused-dependencies.js":"// 3rd party modules\nvar when = require('when');\n\n// public\nmodule.exports = getUnusedDependencies;\n\n// implementation\nfunction getUnusedDependencies(config) {\n  return when(config.deps.reduce(updateIndex, clone(config.bundle)));\n\n  function updateIndex(unused, dependency) {\n    var location = dependency.getPathToBundle();\n    if (location in unused) {\n      delete unused[location];\n    }\n    return unused;\n  }\n\n  function clone(value) {\n    return JSON.parse(JSON.stringify(value));\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/prune-optional-dependencies.js":"// 3rd party modules\nvar when = require('when');\n\n// modules\nvar fs = require('../lib/fs');\n\n// public\nmodule.exports = pruneOptionalDependencies;\n\n// implementation\nfunction pruneOptionalDependencies(config) {\n  return config.options.keepOptional ? when(config.graph) : getPackageJson();\n\n  function getPackageJson() {\n    return fs.readFile(config.path.manifest, {encoding: 'utf8'})\n      .then(onSuccess, onError);\n\n    function onSuccess(manifest) {\n      var pkg = JSON.parse(manifest);\n      if (pkg.optionalDependencies) {\n        for (var name in pkg.optionalDependencies) { // eslint-disable-line guard-for-in\n          delete config.graph.dependencies[name];\n        }\n      }\n      return config.graph;\n    }\n\n    function onError() {\n      throw new Error('! failed to prune optional dependencies');\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/read-bundle.js":"// node modules\nvar path = require('path');\n\n// modules\nvar fs = require('../lib/fs');\n\n// public\nmodule.exports = readBundle;\n\n// implementation\nfunction readBundle(pathToBundle) {\n  return fs.readdir(pathToBundle)\n    .then(indexByPath, onError);\n\n  function indexByPath(filenames) {\n    return filenames.reduce(function (memo, filename) {\n      memo[getAbsolutePath(filename)] = true;\n      return memo;\n    }, {});\n  }\n\n  function getAbsolutePath(filename) {\n    return path.join(pathToBundle, filename);\n  }\n\n  function onError() {\n    throw new Error('! failed to read contents of node_shrinkwrap');\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/analyse/read-npm-cache.js":"// node modules\nvar os = require('os');\nvar path = require('path');\n\n// 3rd party modules\nvar when = require('when');\n\n// modules\nvar childProcess = require('../lib/child-process');\n\n// public\nmodule.exports = readNpmCache;\n\n// implementation\nfunction readNpmCache() {\n  var home = os.homedir();\n\n  return getCacheContents()\n    .then(toArray)\n    .then(getPackages)\n    .then(indexByPath);\n\n  function getCacheContents() {\n    var allData = '';\n    var deferred = when.defer();\n    var npmCache = childProcess.spawn('npm', ['cache', 'ls']);\n\n    npmCache.stdout.setEncoding('utf8');\n    npmCache.stdout.on('data', onData);\n    npmCache.on('close', onClose);\n\n    return deferred.promise;\n\n    function onData(data) {\n      allData += data;\n    }\n\n    function onClose(code) {\n      if (code === 1) {\n        deferred.reject(new Error('! failed to read contents of npm cache'));\n      } else {\n        deferred.resolve(allData);\n      }\n    }\n  }\n\n  function toArray(stdout) {\n    return stdout.split(os.EOL);\n  }\n\n  function getPackages(cacheContents) {\n    return cacheContents.filter(isPackage);\n  }\n\n  function isPackage(location) {\n    return location.indexOf('package.tgz') !== -1;\n  }\n\n  function indexByPath(packages) {\n    return packages.reduce(function (memo, location) {\n      memo[path.resolve(expandTilde(location))] = true;\n      return memo;\n    }, {});\n  }\n\n  function expandTilde(location) {\n    if (home) {\n      return location.replace(/^~($|\\/|\\\\)/, home + '$1');\n    }\n    return location;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/cli/index.js":"// modules\nvar analyse = require('../analyse');\nvar update = require('../update');\nvar displayFailure = require('./display-failure');\nvar displaySummary = require('./display-summary');\n\n// public\nmodule.exports = {\n  run: runCli\n};\n\n// implementation\nfunction runCli(options) {\n  return analyse(options)\n    .then(update, onFail)\n    .then(displaySummary, onFail)\n    .catch(onFail);\n}\n\nfunction onFail(err) {\n  displayFailure(err);\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/update/index.js":"// 3rd party modules\nvar when = require('when');\n\n// modules\nvar addUsedDependencies = require('./add-used-dependencies');\nvar deleteUnusedDependencies = require('./delete-unused-dependencies');\nvar rewriteGraph = require('./rewrite-graph');\n\n// public\nmodule.exports = update;\n\n// implementation\nfunction update(config) {\n  return when.join(\n    addUsedDependencies(config),\n    deleteUnusedDependencies(config)\n  ).then(function () {\n    return rewriteGraph(config);\n  }).then(function () {\n    return config;\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/update/add-used-dependencies.js":"// 3rd party modules\nvar when = require('when');\n\n// public\nmodule.exports = addUsedDependencies;\n\n// implementation\nfunction addUsedDependencies(config) {\n  return when.all(\n    config.deps.map(function (dependency) {\n      return dependency.synchronise();\n    })\n  );\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/update/delete-unused-dependencies.js":"// 3rd party modules\nvar chalk = require('chalk');\nvar when = require('when');\n\n// modules\nvar deleteFile = require('../lib/delete-file');\n\n// public\nmodule.exports = deleteUnusedDependencies;\n\n// implementation\nfunction deleteUnusedDependencies(config) {\n  var deletions = [];\n  for (var location in config.unusedDependencies) { // eslint-disable-line guard-for-in\n    deletions.push(performDeletion(location));\n  }\n  return when.all(deletions);\n\n  function performDeletion(location) {\n    return deleteFile(location)\n      .then(onSuccess);\n  }\n\n  function onSuccess(location) {\n    console.info(chalk.red('- %s'), location.replace(/.+\\//, ''));\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/lib/delete-file.js":"// modules\nvar fs = require('./fs');\n\n// public\nmodule.exports = deleteFile;\n\n// implementation\nfunction deleteFile(location) {\n  return fs.unlink(location)\n    .then(onSuccess, onError);\n\n  function onSuccess() {\n    return location;\n  }\n\n  function onError() {\n    throw new Error('! failed to delete ' + location);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/update/rewrite-graph.js":"// 3rd party modules\nvar chalk = require('chalk');\n\n// modules\nvar fs = require('../lib/fs');\n\n// public\nmodule.exports = getGraph;\n\n// implementation\nfunction getGraph(config) {\n  console.log(chalk.blue('i rewriting ' + config.path.graph));\n  return fs.writeFile(config.path.graph, JSON.stringify(config.graph, null, 2), {encoding: 'utf8'})\n    .then(onSuccess, onError);\n\n  function onSuccess() {\n    return config.path.graph;\n  }\n\n  function onError() {\n    throw new Error('! failed to write to npm-shrinkwrap.json');\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/cli/display-failure.js":"// 3rd party modules\nvar chalk = require('chalk');\n\n// public\nmodule.exports = displayFailure;\n\n// implementation\nfunction displayFailure(err) {\n  console.error(\n    chalk.red('! Please raise an issue at %s\\n\\n%s'),\n    chalk.underline('https://github.com/JamieMason/shrinkpack/issues'),\n    String(err.stack).replace(/^/gm, '    ')\n  );\n  process.exit(1); // eslint-disable-line unicorn/no-process-exit\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/cli/display-summary.js":"// 3rd party modules\nvar chalk = require('chalk');\n\n// modules\nvar getTimeBetween = require('../lib/get-time-between');\n\n// public\nmodule.exports = displaySummary;\n\n// implementation\nfunction displaySummary(config) {\n  console.info([\n    'shrinkpack',\n    chalk.green('+' + config.stats.unbundled.total),\n    chalk.red('-' + config.stats.bundled.unused),\n    chalk.yellow('↓' + config.stats.unbundled.uncached),\n    chalk.magenta('→' + config.stats.unbundled.cached),\n    chalk.green('✓' + config.stats.unbundled.unresolved),\n    chalk.grey(getTimeBetween(config.startTime, new Date()))\n  ].join(' '));\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/src/lib/get-time-between.js":"// public\nmodule.exports = getTimeBetween;\n\n// implementation\nfunction getTimeBetween(dateFrom, dateTo) {\n  return msToTime(dateTo.getTime() - dateFrom.getTime());\n}\n\nfunction msToTime(ms) {\n  var mins = msToMins(ms);\n  var secs = msToSecs(ms);\n  return pad(mins) + ':' + pad(secs);\n}\n\nfunction msToMins(ms) {\n  return Math.floor(ms ? (ms / 1000) / 60 : 0);\n}\n\nfunction msToSecs(ms) {\n  return Math.floor(ms ? (ms / 1000) % 60 : 0);\n}\n\nfunction pad(value) {\n  var whole = Math.floor(value);\n  return whole < 10 ? '0' + whole : whole;\n}\n","/home/travis/build/npmtest/node-npmtest-shrinkpack/node_modules/shrinkpack/cli.js":"#!/usr/bin/env node\n\n// node modules\nvar path = require('path');\n\n// 3rd party modules\nvar chalk = require('chalk');\nvar program = require('commander');\n\n// modules\nvar cli = require('./src/cli');\nvar version = require('./package.json').version;\n\n// implementation\nvar directoryValue = process.cwd();\n\nprogram\n  .version(version)\n  .option('-c, --compress', 'use compressed .tgz tarballs instead of .tar')\n  .option('-o, --keep-optional', 'do not exclude optional dependencies')\n  .arguments('[directory]')\n  .action(function (directory) {\n    directoryValue = path.resolve(directory);\n  });\n\nprogram.on('--help', onHelp);\nprogram.parse(process.argv);\n\ncli.run({\n  compress: program.compress === true,\n  directory: directoryValue,\n  keepOptional: program.keepOptional === true\n});\n\nfunction onHelp() {\n  console.log('  Icons:');\n  console.log('');\n  logIcon(chalk.green, '+', 'Added');\n  logIcon(chalk.yellow, '↓', 'Downloaded');\n  logIcon(chalk.magenta, '→', 'Imported from Cache');\n  logIcon(chalk.blue, 'i', 'Information');\n  logIcon(chalk.red, '-', 'Removed');\n  logIcon(chalk.green, '✓', 'Resolved');\n  logIcon(chalk.grey, '12:34', 'Time Taken');\n  console.log('');\n  console.log('  Compression:');\n  console.log('');\n  console.log('    Although compressed .tgz files have lower filesizes, storing binary files in');\n  console.log('    Git can result in a gradual increase in the time it takes to push to your');\n  console.log('    repository. Shrinkpack uses uncompressed, plain text .tar files by default,');\n  console.log('    which are handled optimally by Git in the same way that .md, .js, and .css');\n  console.log('    files are for example.');\n\n  function logIcon(colour, icon, label) {\n    console.log('    ' + colour(icon) + ' ' + label);\n  }\n}\n"}